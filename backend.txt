
***************************************************************************
********************************SpringBOOt*********************************
***************************************************************************




Send Email to company Mail after fill up the contact form and also in the database









//------- Add Dependancy --------- 1 out of 6

	
<!-- mail -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-mail</artifactId>
			<version>3.3.4</version>
		</dependency>





//------- Application.Properties --------- 2 out of 6




#-------------SMTP (Simple Mail Transfer Protocol) configuration

spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=sharif.shariutullah@gmail.com
spring.mail.password=kluigthayplssvaz
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

#spring.mail.properties.mail.smtp.ssl.trust=smtp.gmail.com



//----spring.mail.password=(.......)  //the password will get from ''APP password'' from gmail. it is one time password





//------- Create Email service --------- 3 out of 6


package com.example.fifotech.services;

import jakarta.mail.MessagingException;
import jakarta.mail.internet.MimeMessage;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Service;

@Service
public class EmailService {


    @Autowired
    private JavaMailSender mailSender;

    public void sendContactEmail(String to, String subject, String body) throws MessagingException {
        MimeMessage message = mailSender.createMimeMessage();
        MimeMessageHelper helper = new MimeMessageHelper(message, true);

        helper.setTo(to);
        helper.setSubject(subject);
        helper.setText(body, true);

        mailSender.send(message);
    }

}









//------- Add The Email Service in CONTACT service and also Design the formation what to view after sending email to the the company --------- 4 out of 6





package com.example.fifotech.services;

import com.example.fifotech.entity.ClientsContact;
import com.example.fifotech.repository.ContactRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class ContactService {


    @Autowired
    private ContactRepository contactRepository;


    @Autowired
    private EmailService emailService;


    //    create
    public ClientsContact createContact(ClientsContact contact) {


        ClientsContact savedContact = contactRepository.save(contact);

        // Prepare email contentS
        String subject = "New Contact Request from " + contact.getClientName();


        String body = "<h1>New Contact Request</h1>" +
                "<p><strong>Company Name:</strong> " + contact.getCompanyName() + "</p>" +
                "<p><strong>Address:</strong> " + contact.getCompanyAddress() + "</p>" +
                "<p><strong>Name:</strong> " + contact.getClientName() + "</p>" +
                "<p><strong>Email:</strong> " + contact.getEmail() + "</p>" +
                "<p><strong>Phone:</strong> " + contact.getCompanyPhone() + "</p>" +
                "<p><strong>Mobile:</strong> " + contact.getCompanyMobileNumber() + "</p>" +
                "<p><strong>Message:</strong> " + contact.getMessage() + "</p>";

        try {
            // Send the email
            emailService.sendContactEmail("sharif.shariutullah@gmail.com", subject, body);
        } catch (Exception e) {
            // Handle email sending error
            e.printStackTrace();
        }


//        return contactRepository.save(contact);

        return savedContact;
    }




    // show from db to website
    public List<ClientsContact> getAllClientsContacts() {
        return (List<ClientsContact>) contactRepository.findAll();

    }

}







//------- set up Clients Contact Controller --------- 5 out of 6





package com.example.fifotech.controller;

import com.example.fifotech.entity.ClientsContact;
import com.example.fifotech.entity.JobPosting;
import com.example.fifotech.services.ContactService;
import com.example.fifotech.services.JobPostingService;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api")
@RequiredArgsConstructor
@CrossOrigin(origins = "http://localhost:4200", allowCredentials = "true")
public class ClientsContactController {

    @Autowired
    private ContactService contactService;

    //create
    @PostMapping({"/createContact"})
    public ClientsContact createContact(@RequestBody ClientsContact clientsContact){
        return contactService.createContact(clientsContact);
    }












//     show

    @GetMapping({"/getAlClientsContact"})
    public List<ClientsContact> getAllClientsContact() {
        return contactService.getAllClientsContacts();
    }
    ;

}










//------- Clients Contact   Entity --------- 6 out of 6


package com.example.fifotech.entity;

import jakarta.persistence.*;
import lombok.*;

@Entity
@Getter
@Setter
@AllArgsConstructor
@RequiredArgsConstructor
@Data
@Table(name = "client_contact_info")
public class ClientsContact {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long contactId;
    private String companyName;
    private String companyAddress;
    private String clientName;
    private String email;
    private String companyPhone;
    private String companyMobileNumber;


    @Column(length = 5000)
    private String message;

}






















******************* NOW CHECK IT IN POSTMAN************************